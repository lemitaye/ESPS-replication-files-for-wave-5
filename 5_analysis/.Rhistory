regions_hh_level,
national_hh_level %>%
mutate(region = "National")
)  %>%
left_join(labs, by = "variable") %>%
select(wave, region, variable, label, mean, nobs) %>%
bind_rows(psnp_w4)
write_csv(adopt_rates_w4_hh, file = "dynamics_presentation/data/adopt_rates_w4_hh.csv")
p_w4 <- psnp_hh %>%
filter(
wave == "Wave 4", locality == "Aggregate",
sample == "All", region != "Addis Ababa"
) %>%
select(wave, variable, region, mean, nobs, label)
adopt_rates_w4_hh <- bind_rows(
regions_hh_level,
national_hh_level %>%
mutate(region = "National")
)  %>%
left_join(labs, by = "variable") %>%
select(wave, region, variable, label, mean, nobs) %>%
bind_rows(psnp_w4)
write_csv(adopt_rates_w4_hh, file
psnp_w4 <- psnp_hh %>%
psnp_w4 <- psnp_hh %>%
filter(
wave == "Wave 4", locality == "Aggregate",
sample == "All", region != "Addis Ababa"
) %>%
select(wave, variable, region, mean, nobs, label)
adopt_rates_w4_hh <- bind_rows(
regions_hh_level,
national_hh_level %>%
mutate(region = "National")
)  %>%
left_join(labs, by = "variable") %>%
select(wave, region, variable, label, mean, nobs) %>%
bind_rows(psnp_w4)
write_csv(adopt_rates_w4_hh, file = "dynamics_presentation/data/adopt_rates_w4_hh.csv")
adopt_rates_w4_hh
adopt_rates_w4_hh <- read_csv("dynamics_presentation/data/adopt_rates_w4_hh.csv")
# join with adoption rates data
ess4_all <- adopt_rates_w4_hh %>%
left_join(pop_rur_w4_all, by = "region") %>%
mutate(abs_num = mean * pop_w4_all) %>%
filter(region != "National") %>%
select(region, label, mean, abs_num) %>%
arrange(region, label)
ess4_pnl <- adopt_rates_w4_hh %>%
left_join(pop_rur_pnl, by = "region") %>%
mutate(abs_num = mean * pop_w5_panel) %>%
filter(!region %in% c("Tigray", "National")) %>%
select(region, label, mean, abs_num) %>%
arrange(region, label)
ess5_all <- adopt_rates_w4_all %>%
left_join(pop_rur_w5_all, by = "region") %>%
mutate(abs_num = mean * pop_w5_all) %>%
filter(region != "National") %>%
select(region, label, mean, abs_num) %>%
arrange(region, label)
df <- ess4_all %>%
rename(num = abs_num) %>%
pivot_wider(
names_from = region,
names_glue = "{region}_{.value}",
values_from = c(mean, num)
) %>%
select(label, sort(colnames(.)))
# Find the column indices that end with "_num"
num_cols <- grep("_num$", names(df))
# Create a new column that is the sum of the selected columns
df$Total <- rowSums(df[, num_cols], na.rm = TRUE)
# final rounding
df <- df %>%
mutate(
across(c(ends_with("_num"), Total), ~round(.)),
across(c(ends_with("_mean"), Total), ~round(., 3))
)
make_sheet <- function(tbl) {
df <- tbl %>%
rename(num = abs_num) %>%
pivot_wider(
names_from = region,
names_glue = "{region}_{.value}",
values_from = c(mean, num)
) %>%
select(label, sort(colnames(.)))
# Find the column indices that end with "_num"
num_cols <- grep("_num$", names(df))
# Create a new column that is the sum of the selected columns
df$Total <- rowSums(df[, num_cols])
# final rounding
df <- df %>%
mutate(
across(c(ends_with("_num"), Total), ~round(.)),
across(c(ends_with("_mean"), Total), ~round(., 3))
)
region_nm <- str_remove(colnames(df)[-1], "_mean|_num") %>%
as_tibble() %>%
mutate(name = paste0("X", 1:nrow(.))) %>%
pivot_wider(names_from = name, values_from = value)
col_hd <- rep(c("Mean", "No. of hhs"), (ncol(df)-1)/2) %>%
as_tibble() %>%
mutate(name = paste0("X", 1:nrow(.))) %>%
pivot_wider(names_from = name, values_from = value)
return(list(df = df, region_nm = region_nm, col_hd = col_hd))
}
df_lst <- list(
"ESS4 - all" = make_sheet(ess4_all)$df,
"ESS4 - panel" = make_sheet(ess4_pnl)$df,
"ESS5 - all" = make_sheet(ess5_all)$df
)
reg_lst <- list(
make_sheet(ess4_all)$region_nm,
make_sheet(ess4_pnl)$region_nm,
make_sheet(ess5_all)$region_nm
)
col_lst <- list(
make_sheet(ess4_all)$col_hd,
make_sheet(ess4_pnl)$col_hd,
make_sheet(ess5_all)$col_hd
)
# Population frame:
pop_frm <- reduce(list(pop_rur_w4_all, pop_rur_w5_all, pop_rur_pnl), left_join, by = "region") %>%
rename("Region" = region, "Wave 4 weight" = pop_w4_all,
"Wave 5 weight" = pop_w5_all, "Panel weight" = pop_w5_panel) %>%
mutate_if(is.numeric, ~round(.))
# create a workbook
wb <- createWorkbook()
# set global options
options(openxlsx.borderColour = "#4F80BD")
options(openxlsx.borderStyle = "thin")
modifyBaseFont(wb, fontSize = 10, fontName = "Times New Roman")
# Add a worksheet
addWorksheet(wb, "Population Frame")
# write data
writeData(wb, sheet = "Population Frame", pop_frm, startCol = 2, startRow = 4)
for (i in seq_along(df_lst)) {
# Add a worksheet
addWorksheet(wb, names(df_lst)[[i]] )
# write data
writeData(wb, sheet = names(df_lst)[[i]], df_lst[[i]], startCol = 1, startRow = 4, colNames = FALSE)
# Write the region names
writeData(wb, sheet = names(df_lst)[[i]], reg_lst[[i]], startCol = 2, startRow = 2, colNames = FALSE)
# write column headers
writeData(wb, sheet = names(df_lst)[[i]], col_lst[[i]], startCol = 2, startRow = 3, colNames = FALSE)
# column width
setColWidths(wb, sheet = names(df_lst)[[i]], cols = 1, widths = 30)
# freeze panes
freezePane(wb, sheet = names(df_lst)[[i]], firstActiveRow = 4, firstActiveCol = 2)
# styles (fine-tuning)
addStyle(
wb, sheet = names(df_lst)[[i]], cols = 2:ncol(df_lst[[i]]), rows = 2:31,
style = createStyle(halign = "center"), gridExpand = TRUE
)
}
# Set the column names with merged cells
for (i in seq_along(df_lst)) {
for (j in seq(2, ncol(reg_lst[[i]]), by = 2)) {
x <- c(j, j+1)
mergeCells(wb, sheet = names(df_lst)[[i]], cols = x, rows = 2)
}
}
# Save the workbook as an Excel file
saveWorkbook(wb, "writeXLSX2.xlsx", overwrite = TRUE)
openXL("writeXLSX2.xlsx")
# modify PSNP
psnp_w4_rur <- psnp_hh %>%
filter(
wave == "Wave 4", locality == "Rural",
sample == "All", region != "Addis Ababa"
) %>%
select(wave, variable, region, mean, nobs, label)
adopt_rates_w4_hh <- bind_rows(
regions_hh_level,
national_hh_level %>%
mutate(region = "National")
)  %>%
left_join(labs, by = "variable") %>%
select(wave, region, variable, label, mean, nobs) %>%
bind_rows(psnp_w4_rur)
write_csv(adopt_rates_w4_hh, file = "dynamics_presentation/data/adopt_rates_w4_hh.csv")
adopt_rates_w4_hh <- read_csv("dynamics_presentation/data/adopt_rates_w4_hh.csv")
ess4_all <- adopt_rates_w4_hh %>%
left_join(pop_rur_w4_all, by = "region") %>%
mutate(abs_num = mean * pop_w4_all) %>%
filter(region != "National") %>%
select(region, label, mean, abs_num) %>%
arrange(region, label)
ess4_pnl <- adopt_rates_w4_hh %>%
left_join(pop_rur_pnl, by = "region") %>%
mutate(abs_num = mean * pop_w5_panel) %>%
filter(!region %in% c("Tigray", "National")) %>%
select(region, label, mean, abs_num) %>%
arrange(region, label)
ess5_all <- adopt_rates_w4_all %>%
left_join(pop_rur_w5_all, by = "region") %>%
mutate(abs_num = mean * pop_w5_all) %>%
filter(region != "National") %>%
select(region, label, mean, abs_num) %>%
arrange(region, label)
df <- ess4_all %>%
rename(num = abs_num) %>%
pivot_wider(
names_from = region,
names_glue = "{region}_{.value}",
values_from = c(mean, num)
) %>%
select(label, sort(colnames(.)))
# Find the column indices that end with "_num"
num_cols <- grep("_num$", names(df))
# Create a new column that is the sum of the selected columns
df$Total <- rowSums(df[, num_cols], na.rm = TRUE)
# final rounding
df <- df %>%
mutate(
across(c(ends_with("_num"), Total), ~round(.)),
across(c(ends_with("_mean"), Total), ~round(., 3))
)
make_sheet <- function(tbl) {
df <- tbl %>%
rename(num = abs_num) %>%
pivot_wider(
names_from = region,
names_glue = "{region}_{.value}",
values_from = c(mean, num)
) %>%
select(label, sort(colnames(.)))
# Find the column indices that end with "_num"
num_cols <- grep("_num$", names(df))
# Create a new column that is the sum of the selected columns
df$Total <- rowSums(df[, num_cols])
# final rounding
df <- df %>%
mutate(
across(c(ends_with("_num"), Total), ~round(.)),
across(c(ends_with("_mean"), Total), ~round(., 3))
)
region_nm <- str_remove(colnames(df)[-1], "_mean|_num") %>%
as_tibble() %>%
mutate(name = paste0("X", 1:nrow(.))) %>%
pivot_wider(names_from = name, values_from = value)
col_hd <- rep(c("Mean", "No. of hhs"), (ncol(df)-1)/2) %>%
as_tibble() %>%
mutate(name = paste0("X", 1:nrow(.))) %>%
pivot_wider(names_from = name, values_from = value)
return(list(df = df, region_nm = region_nm, col_hd = col_hd))
}
df_lst <- list(
"ESS4 - all" = make_sheet(ess4_all)$df,
"ESS4 - panel" = make_sheet(ess4_pnl)$df,
"ESS5 - all" = make_sheet(ess5_all)$df
)
reg_lst <- list(
make_sheet(ess4_all)$region_nm,
make_sheet(ess4_pnl)$region_nm,
make_sheet(ess5_all)$region_nm
)
col_lst <- list(
make_sheet(ess4_all)$col_hd,
make_sheet(ess4_pnl)$col_hd,
make_sheet(ess5_all)$col_hd
)
# Population frame:
pop_frm <- reduce(list(pop_rur_w4_all, pop_rur_w5_all, pop_rur_pnl), left_join, by = "region") %>%
rename("Region" = region, "Wave 4 weight" = pop_w4_all,
"Wave 5 weight" = pop_w5_all, "Panel weight" = pop_w5_panel) %>%
mutate_if(is.numeric, ~round(.))
# create a workbook
wb <- createWorkbook()
# set global options
options(openxlsx.borderColour = "#4F80BD")
options(openxlsx.borderStyle = "thin")
modifyBaseFont(wb, fontSize = 10, fontName = "Times New Roman")
# Add a worksheet
addWorksheet(wb, "Population Frame")
# write data
writeData(wb, sheet = "Population Frame", pop_frm, startCol = 2, startRow = 4)
for (i in seq_along(df_lst)) {
# Add a worksheet
addWorksheet(wb, names(df_lst)[[i]] )
# write data
writeData(wb, sheet = names(df_lst)[[i]], df_lst[[i]], startCol = 1, startRow = 4, colNames = FALSE)
# Write the region names
writeData(wb, sheet = names(df_lst)[[i]], reg_lst[[i]], startCol = 2, startRow = 2, colNames = FALSE)
# write column headers
writeData(wb, sheet = names(df_lst)[[i]], col_lst[[i]], startCol = 2, startRow = 3, colNames = FALSE)
# column width
setColWidths(wb, sheet = names(df_lst)[[i]], cols = 1, widths = 30)
# freeze panes
freezePane(wb, sheet = names(df_lst)[[i]], firstActiveRow = 4, firstActiveCol = 2)
# styles (fine-tuning)
addStyle(
wb, sheet = names(df_lst)[[i]], cols = 2:ncol(df_lst[[i]]), rows = 2:31,
style = createStyle(halign = "center"), gridExpand = TRUE
)
}
# Set the column names with merged cells
for (i in seq_along(df_lst)) {
for (j in seq(2, ncol(reg_lst[[i]]), by = 2)) {
x <- c(j, j+1)
mergeCells(wb, sheet = names(df_lst)[[i]], cols = x, rows = 2)
}
}
# Save the workbook as an Excel file
saveWorkbook(wb, "writeXLSX2.xlsx", overwrite = TRUE)
openXL("writeXLSX2.xlsx")
psnp_w4_rur
psnp_w4_rur %>% filter(region == "National")
getwd()
root <- "C:/Users/l.daba/SPIA Dropbox/SPIA General/5. OBJ.3 - Data collection/Country teams/Ethiopia/LSMS_W5"
hh_geo_w5 <- read_dta(
file.path(root, "2_raw_data/data/HH/Pub_ETH_HouseholdGeovariables_Y5.dta")
)
hh_geo_w5
eth_regions <- st_read(
dsn = "./gadm41_ETH_shp",
layer = "gadm41_ETH_1"
)
eth_regions
library(labelled)
ggplot() +
geom_sf(data = eth_regions)
hh_geo_w5 %>%
select(h2021_tot, af_bio_12_x, wetQ_avg, af_bio_16_x, eviarea_avg)
hh_geo_w5 %>%
select(h2021_tot, af_bio_12_x, wetQ_avg, af_bio_16_x, eviarea_avg,
household_id, lat_dd_mod, lon_dd_mod)
hh_geo_slctd <- hh_geo_w5 %>%
select(h2021_tot, af_bio_12_x, wetQ_avg, af_bio_16_x, eviarea_avg,
household_id, lat_dd_mod, lon_dd_mod)
hh_geo_slctd
hh_geo_slctd %>% glimpse()
hh_geo_slctd <- hh_geo_w5 %>%
select(
household_id, h2021_tot, af_bio_12_x, wetQ_avg, af_bio_16_x, eviarea_avg,
lat_dd_mod, lon_dd_mod
)
hh_geo_slctd
hh_geo_slctd %>% glimpse()
?st_as_sf
hh_geo_slctd <- hh_geo_w5 %>%
select(
household_id, h2021_tot, af_bio_12_x, wetQ_avg, af_bio_16_x, eviarea_avg,
lat_dd_mod, lon_dd_mod
)
hh_geo_slctd_sf %>%
st_as_sf()
hh_geo_slctd %>%
st_as_sf()
hh_geo_slctd
hh_geo_slctd %>% gli
hh_geo_slctd %>% glimpse()
hh_geo_slctd_sf <- hh_geo_slctd %>%
st_as_sf(coords = c("lon_dd_mod", "lat_dd_mod"), crs = st_crs(4326))
hh_geo_slctd_sf <- hh_geo_slctd %>%
filter(!is.na(lon_dd_mod), !is.na(lat_dd_mod)) %>%
st_as_sf(coords = c("lon_dd_mod", "lat_dd_mod"), crs = st_crs(4326))
ggplot() +
geom_sf(data = eth_regions) +
geom_sf(data = hh_geo_slctd_sf)
hh_geo_slctd
hh_geo_slctd_sf %>%
ggplot(aes(h2021_tot)) +
geom_histogram()
theme_set(theme_light())
hh_geo_slctd_sf %>%
ggplot(aes(h2021_tot)) +
geom_histogram()
hh_geo_slctd_sf %>%
ggplot(aes(h2021_tot)) +
geom_histogram()
hh_geo_slctd_sf %>%
ggplot(aes(af_bio_12_x)) +
geom_histogram()
ess5_weights_hh <- read_dta(file.path(root, "2_raw_data/data/HH/ESS5_weights_hh.dta"))
ess5_weights_hh
ess5_weights_hh %>% glimpse()
hh_geo_slctd <- hh_geo_w5 %>%
select(
household_id, h2021_tot, af_bio_12_x, wetQ_avg, af_bio_16_x, eviarea_avg,
lat_dd_mod, lon_dd_mod
) %>%
left_join(
ess5_weights_hh %>%
select(-interview_key),
by = "household_id"
)
hh_geo_slctd <- hh_geo_w5 %>%
select(
household_id, h2021_tot, af_bio_12_x, wetQ_avg, af_bio_16_x, eviarea_avg,
lat_dd_mod, lon_dd_mod
) %>%
left_join(
ess5_weights_hh %>%
select(-interview__key),
by = "household_id"
)
hh_geo_slctd
hh_geo_slctd %>% glimpse()
hh_geo_slctd_sf %>%
ggplot(aes(af_bio_12_x)) +
geom_histogram() +
facet_wrap(~ region)
hh_geo_slctd %>%
ggplot(aes(af_bio_12_x)) +
geom_histogram() +
facet_wrap(~ region)
hh_geo_slctd %>%
ggplot(aes(h2021_tot)) +
geom_histogram() +
facet_wrap(~ region)
ggplot() +
geom_sf(data = eth_regions) +
geom_sf(data = hh_geo_slctd_sf)
ggplot() +
geom_sf(data = eth_regions) +
geom_sf(data = hh_geo_slctd_sf, aes(size = h2021_tot))
ggplot() +
geom_sf(data = eth_regions) +
geom_sf(data = hh_geo_slctd_sf, aes(size = h2021_tot), alpha = .5)
hh_geo_slctd
write_csv(hh_geo_slctd, "hh_geo_slctd.csv")
hh_geo_slctd %>%
count(rururb)
hh_geo_slctd %>%
filter(is.na(rururb))
hh_geo_slctd %>%
ggplot(aes(h2021_tot)) +
geom_histogram() +
facet_wrap(~ region)
hh_geo_slctd %>%
ggplot(aes(af_bio_12_x)) +
geom_histogram() +
facet_wrap(~ region)
hh_geo_slctd %>%
ggplot(aes(af_bio_12_x)) +
geom_histogram() +
facet_wrap(~ region, scales = "free")
hh_geo_slctd %>%
ggplot(aes(h2021_tot)) +
geom_histogram() +
facet_wrap(~ region, scales = "free")
hh_geo_slctd %>%
ggplot(aes(af_bio_12_x)) +
geom_boxplot() +
facet_wrap(~ region, scales = "free")
hh_geo_slctd %>%
ggplot(aes(af_bio_12_x)) +
geom_boxplot()
hh_geo_slctd %>%
ggplot(aes(af_bio_12_x)) +
geom_boxplot() %>%
facet_wrap(~ rururb)
hh_geo_slctd %>%
ggplot(aes(af_bio_12_x)) +
geom_boxplot() +
facet_wrap(~ rururb)
hh_geo_slctd %>%
ggplot(aes(af_bio_12_x)) +
geom_boxplot() +
facet_wrap(~ rururb) +
coord_flip()
hh_geo_slctd %>%
ggplot(aes(af_bio_12_x)) +
geom_boxplot() +
facet_wrap(~ region, scales = "free") +
coord_flip()
hh_geo_slctd %>%
mutate(region = fct_reorder(region, af_bio_12_x))
hh_geo_slctd %>%
mutate(region = fct_reorder(region, af_bio_12_x)) %>%
ggplot(aes(region, af_bio_12_x)) +
geom_boxplot() +
facet_wrap(~ region, scales = "free") +
coord_flip()
hh_geo_slctd %>%
mutate(region = fct_reorder(region, af_bio_12_x)) %>%
ggplot(aes(region, af_bio_12_x)) +
geom_boxplot()
hh_geo_slctd %>%
mutate(region = fct_reorder(region, af_bio_12_x)) %>%
ggplot(aes(af_bio_12_x, region)) +
geom_boxplot()
hh_geo_slctd %>%
ggplot(aes(h2021_tot)) +
geom_histogram()
hh_geo_slctd %>%
ggplot(aes(h2021_tot)) +
geom_density()
hh_geo_slctd %>%
ggplot(aes(h2021_tot)) +
geom_histogram()
hh_geo_slctd %>%
mutate(region = fct_reorder(region, af_bio_12_x)) %>%
ggplot(aes(af_bio_12_x, region)) +
geom_boxplot()
hh_geo_slctd %>%
mutate(region = fct_reorder(region, af_bio_12_x)) %>%
ggplot(aes(af_bio_12_x, region)) +
geom_boxplot() +
facet_wrap(~rururb)
hh_geo_slctd %>%
mutate(region = fct_reorder(region, af_bio_12_x)) %>%
ggplot(aes(af_bio_12_x, region)) +
geom_boxplot() +
facet_wrap(~rururb, scales = "free_x")
hh_geo_slctd %>%
mutate(region = fct_reorder(region, af_bio_12_x)) %>%
ggplot(aes(af_bio_12_x, region, fill = rururb)) +
geom_boxplot() +
facet_wrap(~rururb, scales = "free_x")
